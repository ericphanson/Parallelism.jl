var documenterSearchIndex = {"docs":
[{"location":"#Parallelism.jl","page":"Home","title":"Parallelism.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [Parallelism]","category":"page"},{"location":"#Parallelism._tmap-Tuple{Any,Vararg{Any,N} where N}","page":"Home","title":"Parallelism._tmap","text":"_tmap(f, xs...)\n\nAn internal helper for tmap that handles the basesize == 1 case.\n\n\n\n\n\n","category":"method"},{"location":"#Parallelism._tmap_with_partition-Tuple{Any,Vararg{Any,N} where N}","page":"Home","title":"Parallelism._tmap_with_partition","text":"_tmap_with_partition(f, xss...; basesize)\n\nAn internal helper for tmap that handles the basesize > 1 case. Works for basesize == 1, but less efficent; since it breaks things up into single item slices then stiches them back together again.\n\n\n\n\n\n","category":"method"},{"location":"#Parallelism.robust_pmap-Tuple{Function,Vararg{Any,N} where N}","page":"Home","title":"Parallelism.robust_pmap","text":"robust_pmap(f::Function, xs::Any, num_retries::Int=3)\n\nA pmap function with retries for common network errors.\n\n\n\n\n\n","category":"method"},{"location":"#Parallelism.tmap-Tuple{Any,Vararg{Any,N} where N}","page":"Home","title":"Parallelism.tmap","text":"tmap(f, xs...; basesize=1)\n\nMultithreaded version of map. basesize controls the minimum number of items from xs to process per @spawned task.\n\ntip: Tip\nbasesize should be set high enough that proccessing that many items takes about ~1ms. This is to counter the ~50Î¼s overhead it takes to dispatch work to a thread. If the function takes >1ms per call, then basesize=1 is recommended.\n\n\n\n\n\n","category":"method"},{"location":"#Parallelism.tmap_with_warmup-Tuple{Any,Vararg{Any,N} where N}","page":"Home","title":"Parallelism.tmap_with_warmup","text":"tmap_with_warmup(f, xs...; basesize=1)\n\nSimilar to tmap, but runs the first call single threaded, before multithreading the remainnder. This is useful for dealing with things that benifit from something happening on first run. Which might be related to caching values, or some compilation troubles.\n\nbasesize controls the minimum number of items from xs to process per @spawned task.\n\nSee tmap for more details\n\n\n\n\n\n","category":"method"}]
}
